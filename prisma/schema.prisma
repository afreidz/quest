generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Client {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  createdBy String

  name String @unique

  systems System[]
}

model System {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  createdBy String

  title String

  clientId  String
  client    Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  revisions Revision[]

  @@unique([clientId, title])
}

model Revision {
  id        String   @id @default(uuid())
  createdBy String
  createdAt DateTime @default(now()) @db.Timestamptz(3)

  title String

  systemId String
  system   System @relation(fields: [systemId], references: [id], onDelete: Cascade)

  survey    Survey? @relation("RevisionSurvey")
  checklist Survey? @relation("RevisionChecklist")

  sessions    Session[]
  respondents Respondent[]

  @@unique([systemId, title])
}

model Respondent {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  createdBy String
  comsId    String?

  email    String
  imageURL String?
  name     String?
  title    String?
  profile  String?

  surveys    Survey[]
  sessions   Session[]
  revisions  Revision[]
  responses  Response[]
  utterances TranscriptionSegment[]

  @@unique([email])
}

enum SurveyType {
  SUS_CURRENT
  SUS_PROPOSED
  CHECKLIST
}

model Survey {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  createdBy String

  type SurveyType

  questions   Question[]
  responses   Response[]
  respondents Respondent[]

  surveyRevisionId String?   @unique
  revisionAsSurvey Revision? @relation("RevisionSurvey", fields: [surveyRevisionId], references: [id], onDelete: Cascade)

  checklistRevisionId String?   @unique
  revisionAsChecklist Revision? @relation("RevisionChecklist", fields: [checklistRevisionId], references: [id], onDelete: Cascade)
}

model Question {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  createdBy String

  position Int?
  text     String
  positive Boolean @default(true)

  groupId String?
  group   QuestionGroup? @relation(fields: [groupId], references: [id])

  type            SurveyType
  surveys         Survey[]
  responses       Response[]
  responseOptions CurratedResponse[]
}

model QuestionGroup {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  createdBy String

  position Int?
  text     String
  imageURL String?

  questions Question[]
}

model CurratedResponse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  createdBy String

  position       Int?
  numericalValue Int?
  label          String
  value          String

  types     SurveyType[]
  questions Question[]
  responses Response[]
}

model Response {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  createdBy String

  freeformResponse String?

  responseId String?
  response   CurratedResponse? @relation(fields: [responseId], references: [id])

  respondentId String
  respondent   Respondent @relation(fields: [respondentId], references: [id], onDelete: Cascade)

  surveyId String
  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([respondentId, surveyId, questionId])
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  createdBy String

  scheduled DateTime  @db.Timestamptz(3)
  started   DateTime? @db.Timestamptz(3)
  completed DateTime? @db.Timestamptz(3)

  moderator         String
  moderatorComsId   String
  videoURL          String?
  roomComsId        String  @unique
  serverRecordingId String? @unique

  respondentId String
  respondent   Respondent @relation(fields: [respondentId], references: [id])

  revisionId String
  revision   Revision @relation(fields: [revisionId], references: [id], onDelete: Cascade)

  moments     KeyMoment[]
  transcripts TranscriptionSegment[]

  // clips       SessionClip[]
  // feedback          SummarizedFeedbackItem[]
  // results           SummarizedChecklistResult[]
  // suggestions       SummarizedSuggestion[]
}

model KeyMoment {
  id        String   @id @default(uuid())
  time      DateTime @default(now()) @db.Timestamptz(3)
  createdBy String

  text String

  sessionId String
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model TranscriptionSegment {
  id   String   @id @default(uuid())
  time DateTime @default(now()) @db.Timestamptz(3)

  text      String
  moderator Boolean?

  speakerId String?
  speaker   Respondent? @relation(fields: [speakerId], references: [id], onDelete: Cascade)

  sessionId String
  session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

// model SessionClip {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   createdBy String

//   startTime DateTime
//   endTime   DateTime

//   sessionId String
//   session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
// }

// model SummarizedFeedbackItem {
//   id         String    @id @default(uuid())
//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime  @updatedAt
//   createdBy  String
//   revisionId String?
//   sessionId  String?
//   text       String
//   session    Session?  @relation(fields: [sessionId], references: [id])
//   revision   Revision? @relation(fields: [revisionId], references: [id])
// }

// model SummarizedChecklistResult {
//   id         String    @id @default(uuid())
//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime  @updatedAt
//   createdBy  String
//   text       String
//   revisionId String?
//   sessionId  String?
//   session    Session?  @relation(fields: [sessionId], references: [id])
//   revision   Revision? @relation(fields: [revisionId], references: [id])
// }

// model SummarizedSuggestion {
//   id         String    @id @default(uuid())
//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime  @updatedAt
//   createdBy  String
//   text       String
//   revisionId String?
//   sessionId  String?
//   session    Session?  @relation(fields: [sessionId], references: [id])
//   revision   Revision? @relation(fields: [revisionId], references: [id])
// }

// model Summary {
//   id         String    @id @default(uuid())
//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime  @updatedAt
//   createdBy  String
//   text       String
//   revisionId String?   @unique
//   revision   Revision? @relation(fields: [revisionId], references: [id])
// }
